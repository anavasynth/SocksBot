from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart
import asyncio
import logging
import base64
import json
import os

# –¢–æ–∫–µ–Ω —Ç–∞ –ø–∞—Ä–æ–ª—ñ
from config import TOKEN, ADMIN_PASSWORD

# –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∫–æ—Ä–∑–∏–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_cart = {}

# –ê–±—Å–æ–ª—é—Ç–Ω–∏–π —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è chat_id
CHAT_IDS_FILE = "/home/dengromko/SocksWebApp/chat_ids.json"

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –π–æ–≥–æ, —è–∫—â–æ –Ω–µ–º–∞—î
def ensure_file_exists():
    os.makedirs(os.path.dirname(CHAT_IDS_FILE), exist_ok=True)
    if not os.path.exists(CHAT_IDS_FILE):
        with open(CHAT_IDS_FILE, "w", encoding="utf-8") as file:
            json.dump([], file)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è chat_id —É JSON-—Ñ–∞–π–ª
def save_chat_id(chat_id):
    ensure_file_exists()
    try:
        with open(CHAT_IDS_FILE, "r", encoding="utf-8") as file:
            chat_ids = json.load(file)
    except (json.JSONDecodeError, FileNotFoundError):
        chat_ids = []
    if chat_id not in chat_ids:
        chat_ids.append(chat_id)
        with open(CHAT_IDS_FILE, "w", encoding="utf-8") as file:
            json.dump(chat_ids, file, indent=4)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É –∑ JSON —Ñ–∞–π–ª—É
def load_products_from_json():
    with open('/home/dengromko/SocksWebApp/products.json', 'r', encoding='utf-8') as file:
        return json.load(file)

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–æ—é "–ö–æ—Ä–∑–∏–Ω–∞" —Ç–∞ "–ê—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç"
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞"), KeyboardButton(text="üìã –ê—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç")]
    ],
    resize_keyboard=True
)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def start_handler(message: Message):
    user_cart[message.from_user.id] = []  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ—Ä–∑–∏–Ω–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    save_chat_id(message.from_user.id)  # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è chat_id —É JSON
    await message.answer(
        "üëã –ü—Ä–∏–≤—ñ—Ç —è –±–æ—Ç –ö–∞—Ç—é–Ω—è!\n"
        "–¢—É—Ç —à–∫–∞—Ä–ø–µ—Ç–∫–∏ –≤ —è–∫–∏—Ö –ø–æ—á—É—î—à—Å—è –∑–¥–∞—Ç–Ω–∏–º –∑–º—ñ–Ω–∏—Ç–∏ —Å–≤—ñ—Ç. "
        "–í –º–µ–Ω–µ –º–æ–∂–Ω–∞ –∑–∞–º–æ–≤–∏—Ç–∏ –º–µ—Ä—á, —è–∫–∏–π —î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ. "
        "–ö—É–ø—É—é—á–∏ —Ü–µ–π –º–µ—Ä—á —Ç–∏ –∑–º—ñ–Ω—é—î—à –∂–∏—Ç—Ç—è –ø–æ–∫—Ä–∞—â—É—î—à –∂–∏—Ç—Ç—è –º–æ–ª–æ–¥—ñ —ñ–∑ —Å–∏–Ω–¥—Ä–æ–º–æ–º –î–∞—É–Ω–∞. "
        "–î–æ—Å—Ç–∞–≤–∫–∞ –ù–æ–≤–æ—é –ø–æ—à—Ç–æ—é –ø–æ –£–∫—Ä–∞—ó–Ω—ñ –ø—Ä–æ—Ç—è–≥–æ–º —Ç–∏–∂–Ω—è.",
        reply_markup=main_keyboard
    )

    await asyncio.sleep(2)  # –û—á—ñ–∫—É—î–º–æ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É

    products = load_products_from_json()  # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –ø—Ä–∏ –∫–æ–∂–Ω–æ–º—É –∑–∞–ø–∏—Ç—ñ

    for product in products:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"–†–æ–∑–º—ñ—Ä {size}", callback_data=f"add_to_cart:{product['id']}:{size}")]
                for size in product["sizes"]
            ]
        )

        await message.answer_photo(
            photo=product["photo"],
            caption=f"**{product['name']}**\n{product['description']}\n\n–¶—ñ–Ω–∞: {product['price']}",
            reply_markup=keyboard
        )

        await asyncio.sleep(0.4)  # –û—á—ñ–∫—É—î–º–æ 2 —Å–µ–∫—É–Ω–¥–∏ –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìã –ê—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç"
@dp.message(F.text == "üìã –ê—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç")
async def show_products(message: Message):
    products = load_products_from_json()
    for product in products:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"–†–æ–∑–º—ñ—Ä {size}", callback_data=f"add_to_cart:{product['id']}:{size}")]
                for size in product["sizes"]
            ]
        )

        await message.answer_photo(
            photo=product["photo"],
            caption=f"**{product['name']}**\n{product['description']}\n–¶—ñ–Ω–∞: {product['price']} –≥—Ä–Ω",
            reply_markup=keyboard
        )

@dp.callback_query(F.data.startswith("add_to_cart"))
async def add_to_cart(callback: CallbackQuery):
    user_id = callback.from_user.id
    _, product_id, size = callback.data.split(":")
    products = load_products_from_json()
    product = next((p for p in products if p["id"] == product_id), None)

    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ç–æ–≤–∞—Ä —É –∫–æ—à–∏–∫—É
    if user_id not in user_cart:
        user_cart[user_id] = []

    for item in user_cart[user_id]:
        if item["name"] == product["name"] and item["size"] == size:
            item["quantity"] += 1
            await callback.answer(f"‚úÖ {product['name']} ({size}) –¥–æ–¥–∞–Ω–æ —â–µ –æ–¥–Ω—É –æ–¥–∏–Ω–∏—Ü—é!", show_alert=True)
            await update_cart_message(user_id)  # –î–æ–¥–∞–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞ –Ω–∞–≤—ñ—Ç—å –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º—É –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ
            return

    # –î–æ–¥–∞—î–º–æ —Ç–æ–≤–∞—Ä —É –∫–æ—à–∏–∫, —è–∫—â–æ –π–æ–≥–æ —Ç–∞–º —â–µ –Ω–µ–º–∞—î
    user_cart[user_id].append({"name": product["name"], "size": size, "quantity": 1, "price": int(product["price"])})
    await callback.answer(f"‚úÖ {product['name']} ({size}) –¥–æ–¥–∞–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!", show_alert=True)

    await update_cart_message(user_id)  # –ó–∞–≤–∂–¥–∏ –æ–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∫–æ—à–∏–∫


async def update_cart_message(user_id):
    cart = user_cart.get(user_id, [])

    if not cart:
        return

    text = "üõçÔ∏è **–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:**\n\n"
    total_price = 0
    for item in cart:
        text += f"‚Ä¢ {item['name']} - {item['size']} x {item['quantity']}\n"
        total_price += item["price"] * item["quantity"]

    text += f"\n**–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞:** {total_price} –≥—Ä–Ω"

    # –§–æ—Ä–º—É—î–º–æ URL –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    cart_data = {
        "total_price": total_price,
        "items": [{"name": item["name"], "size": item["size"], "quantity": item["quantity"], "price": item["price"]} for item in cart]
    }
    cart_data_json = json.dumps(cart_data)
    encoded_cart_data = base64.urlsafe_b64encode(cart_data_json.encode()).decode()
    url = f"https://dengromko.pythonanywhere.com/?cart_data={encoded_cart_data}"

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", web_app=WebAppInfo(url=url), hide="False")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥"), KeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É")]
        ],
        resize_keyboard=True
    )

    # –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await bot.send_message(user_id, text, reply_markup=keyboard)

# –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É "üõí –ö–æ—Ä–∑–∏–Ω–∞"
@dp.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def view_cart(message: Message):
    user_id = message.from_user.id
    cart = user_cart.get(user_id, [])

    if not cart:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è.")
        return

    text = "üõçÔ∏è **–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:**\n\n"
    total_price = 0
    for item in cart:
        text += f"‚Ä¢ {item['name']} - {item['size']} x {item['quantity']}\n"
        total_price += item["price"] * item["quantity"]

    text += f"\n**–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞:** {total_price} –≥—Ä–Ω"

    # –§–æ—Ä–º—É—î–º–æ URL –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    cart_data = {
        "total_price": total_price,
        "items": [{"name": item["name"], "size": item["size"], "quantity": item["quantity"], "price": item["price"]} for item in cart]
    }
    cart_data_json = json.dumps(cart_data)
    encoded_cart_data = base64.urlsafe_b64encode(cart_data_json.encode()).decode()
    url = f"https://dengromko.pythonanywhere.com/?cart_data={encoded_cart_data}"

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", web_app=WebAppInfo(url=url))],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥"), KeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É")]
        ],
        resize_keyboard=True
    )

    await message.answer(text, reply_markup=keyboard)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É"
@dp.message(F.text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É")
async def clear_cart(message: Message):
    user_id = message.from_user.id
    user_cart[user_id] = []  # –û—á–∏—â–∞—î–º–æ –∫–æ—Ä–∑–∏–Ω—É
    await message.answer("‚úÖ –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=main_keyboard)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîô –ù–∞–∑–∞–¥"
@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main(message: Message):
    await message.answer("üëã –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=main_keyboard)


# –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –ø—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏
@dp.message(F.web_app_data)
async def handle_web_app_data(message: Message):
    data = json.loads(message.web_app_data.data)
    if data.get("action") == "clear_cart":
        user_id = message.from_user.id
        user_cart[user_id] = []

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        await message.answer("‚úÖ –î—è–∫—É—î–º–æ, –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ! –û—á—ñ–∫—É–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É.", reply_markup=main_keyboard)


# –§–ª–∞–≥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∏ –≤–≤—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–∞—Ä–æ–ª—å
waiting_for_password = {}

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ
@dp.message(F.text == "/adminpanel")
async def adminpanel_handler(message: Message):
    user_id = message.from_user.id
    waiting_for_password[user_id] = True  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
    await message.answer("üîë –í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ:")

# –û–±—Ä–æ–±–Ω–∏–∫ –ø–∞—Ä–æ–ª—è –¥–ª—è –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ
@dp.message(F.text)
async def handle_admin_password(message: Message):
    user_id = message.from_user.id

    if waiting_for_password.get(user_id, False):  # –Ø–∫—â–æ –æ—á—ñ–∫—É—î—Ç—å—Å—è –ø–∞—Ä–æ–ª—å
        if message.text == ADMIN_PASSWORD:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üõí –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å: –ó–º—ñ–Ω–∏—Ç–∏ –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç",
                                          web_app=WebAppInfo(url="https://dengromko.pythonanywhere.com/admin"))]
                ]
            )
            await message.answer("‚úÖ –ü–∞—Ä–æ–ª—å –≤—ñ—Ä–Ω–∏–π! –û—Å—å –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è –∑–º—ñ–Ω–∏ –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É:", reply_markup=keyboard)
            waiting_for_password[user_id] = False  # –°–∫–∏–¥–∞—î–º–æ —Ñ–ª–∞–≥ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –≤—Ö–æ–¥—É
        else:
            await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
