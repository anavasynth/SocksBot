import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.filters import CommandStart

# –¢–æ–∫–µ–Ω
from config import TOKEN

# –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∫–æ—Ä–∑–∏–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_cart = {}

# –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤
PRODUCTS = [
    {"id": "1", "name": "–®–∫–∞—Ä–ø–µ—Ç–∫–∏ '–î–æ–±—Ä–æ' üß¶", "photo": "https://dobra-para.com.ua/images/stories/virtuemart/product/konoplya-man.jpg", "description": "–ë–∞–≤–æ–≤–Ω—è–Ω—ñ —à–∫–∞—Ä–ø–µ—Ç–∫–∏ –∑ –ø—Ä–∏–Ω—Ç–æ–º '–î–æ–±—Ä–æ'.", "sizes": ["M", "L"]},
    {"id": "2", "name": "–®–∫–∞—Ä–ø–µ—Ç–∫–∏ '–°–µ—Ä—Ü–µ' ‚ù§Ô∏è", "photo": "https://images.prom.ua/2245777328_w600_h600_2245777328.jpg", "description": "–¢–µ–ø–ª—ñ —à–∫–∞—Ä–ø–µ—Ç–∫–∏ –∑ –≤–∏—à–∏–≤–∫–æ—é —Å–µ—Ä—Ü—è.", "sizes": ["M", "L"]},
    {"id": "3", "name": "–®–∫–∞—Ä–ø–µ—Ç–∫–∏ '–°–∏–ª–∞' üí™", "photo": "https://images.prom.ua/3341671155_w200_h200_3341671155.jpg", "description": "–ß–æ—Ä–Ω—ñ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ñ —à–∫–∞—Ä–ø–µ—Ç–∫–∏ –∑ –Ω–∞–ø–∏—Å–æ–º '–°–∏–ª–∞'.", "sizes": ["M", "L"]},
    {"id": "4", "name": "–®–∫–∞—Ä–ø–µ—Ç–∫–∏ '–£–∫—Ä–∞—ó–Ω–∞' üá∫üá¶", "photo": "https://image-thumbs.shafastatic.net/313131330_310_430", "description": "–®–∫–∞—Ä–ø–µ—Ç–∫–∏ —É –∫–æ–ª—å–æ—Ä–∞—Ö –ø—Ä–∞–ø–æ—Ä–∞ –£–∫—Ä–∞—ó–Ω–∏.", "sizes": ["M", "L"]},
    {"id": "5", "name": "–®–∫–∞—Ä–ø–µ—Ç–∫–∏ '–ó–∏–º–∞' ‚ùÑÔ∏è", "photo": "https://images.prom.ua/3341671155_w200_h200_noski-s-printom.jpg", "description": "–ó–∏–º–æ–≤—ñ —Ç–µ–ø–ª—ñ —à–∫–∞—Ä–ø–µ—Ç–∫–∏ –∑ –≤—ñ–∑–µ—Ä—É–Ω–∫–∞–º–∏.", "sizes": ["M", "L"]}
]


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def start_handler(message: Message):
    user_cart[message.from_user.id] = []  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ—Ä–∑–∏–Ω–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –û—Å—å –Ω–∞—à –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —à–∫–∞—Ä–ø–µ—Ç–æ–∫:")

    for product in PRODUCTS:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard = [
                [InlineKeyboardButton(text = f"–†–æ–∑–º—ñ—Ä {size}" , callback_data = f"add_to_cart:{product['id']}:{size}")]
                for size in product["sizes"]
            ]
        )

        await message.answer_photo(
            photo = product["photo"] ,
            caption = f"**{product['name']}**\n{product['description']}" ,
            reply_markup = keyboard
        )


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –≤ –∫–æ—Ä–∑–∏–Ω—É
@dp.callback_query(F.data.startswith("add_to_cart"))
async def add_to_cart(callback: CallbackQuery):
    user_id = callback.from_user.id
    _ , product_id , size = callback.data.split(":")

    product = next((p for p in PRODUCTS if p["id"] == product_id) , None)
    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!" , show_alert = True)
        return

    user_cart[user_id].append({"name": product["name"] , "size": size})

    await callback.answer(f"‚úÖ {product['name']} ({size}) –¥–æ–¥–∞–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!" , show_alert = True)


# –ö–æ–º–∞–Ω–¥–∞ /cart –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–æ—Ä–∑–∏–Ω–∏
@dp.message(F.text == "/cart")
async def view_cart(message: Message):
    user_id = message.from_user.id
    cart = user_cart.get(user_id , [])

    if not cart:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è.")
        return

    text = "üõçÔ∏è **–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:**\n\n"
    for item in cart:
        text += f"‚Ä¢ {item['name']} - {item['size']}\n"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard = [
            [InlineKeyboardButton(text = "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" ,
                                  web_app=WebAppInfo(url="https://sockswebapp.onrender.com/"))
             ]
        ]
    )

    await message.answer(text , reply_markup = keyboard)


# –û–±—Ä–æ–±–Ω–∏–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
@dp.callback_query(F.data == "checkout")
async def checkout(callback: CallbackQuery):
    user_id = callback.from_user.id
    cart = user_cart.get(user_id , [])

    if not cart:
        await callback.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è!" , show_alert = True)
        return

    text = "‚úÖ **–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–µ!**\n–ú–∏ —Å–∫–æ—Ä–æ –∑–≤'—è–∂–µ–º–æ—Å—å –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.\n\nüß¶ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n"
    for item in cart:
        text += f"‚Ä¢ {item['name']} - {item['size']}\n"

    # –û—á–∏—â–∞—î–º–æ –∫–æ—Ä–∑–∏–Ω—É
    user_cart[user_id] = []

    await callback.message.answer(text)
    await callback.answer()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
